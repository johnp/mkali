#!/bin/sh
# Make an Alpine Linux VM image
# Alpine Linux OS version is set via repositories file (usually latest-stable or edge) in config dir
set -eu

# Pull alpine-make-vm-image git submodule
git submodule update --init --recursive

if [ "$#" -ne "1" ] || [ ! -d "$1" ]; then
	echo "mkali requires a path to the configuration directory as argument"
	exit 1
fi
TARGET="$1"
echo "Building $TARGET"

# source target configuration (unsafe!)
[ -f "$TARGET/mkali.conf" ] && . "$TARGET/mkali.conf"

# else, set default configuration
# TODO: document all those options
: ${VM_NAME:=$(basename "$TARGET")}
: ${IMAGE_FORMAT:='qcow2'}
: ${IMAGE_SIZE:='200M'}
: ${ROOTFS:='ext4'}
: ${KERNEL_FLAVOR:='virt'}
: ${OUTPUT:="$VM_NAME.$IMAGE_FORMAT"}
: ${PASSWORD='password'}
# System Timezone, e.g. UTC or Europe/Berlin
: ${TIMEZONE='UTC'}
# Keymap layout and variant
: ${KEYMAP='us us'}
# TODO: add all other alpine-make-vm-image options

# TODO: possibly make these fixed/auto-generate repositories file or keys dir
: ${REPOSITORIES:="$TARGET/etc/apk/repositories"}
: ${KEYS_DIR:="$TARGET/etc/apk/keys"}

# TODO: check if target file already exists and confirm overwrite/deletion / have -f/--force flag (look at mkosi)

# alpine-make-vm-image re-downloads the tools *every time*,
# so let's at least re-use them in /tmp
# TODO: upstream this (maybe combined with apk package cache)
: ${APK_TOOLS_URI:="https://github.com/alpinelinux/apk-tools/releases/download/v2.10.0/apk-tools-2.10.0-x86_64-linux.tar.gz"}
: ${APK_TOOLS_SHA256:="77f2d256fcd5d6fdafadf43bb6a9c85c3da7bb471ee842dcd729175235cb9fed"}
: ${APK:="/tmp/apk-tools/apk"}
APK_DIR=$(dirname "$APK")
# TODO: version/integrity check apk binary
if ! command -v "$APK" >/dev/null; then
	echo 'Downloading static apk-tools...'
	OLDWD=$(pwd)
	mkdir -p "$APK_DIR" && cd "$APK_DIR" \
	  && wget --no-verbose "$APK_TOOLS_URI" \
	  && echo "$APK_TOOLS_SHA256  ${APK_TOOLS_URI##*/}" | sha256sum -c \
	  && tar --strip-components=1 -xzf "${APK_TOOLS_URI##*/}" \
	  && rm "${APK_TOOLS_URI##*/}"
	cd "$OLDWD"
fi

# Clean up on error
cleanup() {
  set +eu
  trap '' EXIT HUP INT TERM # unset trap to avoid loop
  [ -f "$SETUP_SCRIPT" ] && rm "$SETUP_SCRIPT"
}
trap cleanup EXIT HUP INT TERM

# execute initial system configuration script before user provided mkali.postinst
SETUP_SCRIPT=$(mktemp "$TARGET/mkali.setup.XXXX")
chmod +x "$SETUP_SCRIPT"
# TODO: verify hostname is sent in DHCP request
cat >"$SETUP_SCRIPT" <<_EOF_
#!/bin/sh
# Initial system setup
set -eu

echo "root:$PASSWORD" | /usr/sbin/chpasswd
setup-hostname -n $VM_NAME
setup-timezone -z $TIMEZONE
setup-keymap $KEYMAP
setup-interfaces -i <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
	hostname $VM_NAME
EOF

# enable networking and urandom on boot
rc-update add networking boot
rc-update add urandom boot
# react to ACPI events sent by the hypervisor
rc-update add acpid default
# enable ssh server if installed
[ -f '/etc/conf.d/sshd' ] && rc-update add sshd default
[ -f '/etc/conf.d/dropbear' ] && rc-update add dropbear default

# make sure to forbid root password logins via dropbear
# (openssh already has this by default)
[ -f '/etc/conf.d/dropbear' ] && sed -i -e 's/DROPBEAR_OPTS=""/DROPBEAR_OPTS="-g"/' /etc/conf.d/dropbear || true
# shorten 3s boot delay to 0.1s
sed -i -e 's/TIMEOUT 30/TIMEOUT 1/' /boot/extlinux.conf || true
rm /etc/motd

# copy directory tree under /mnt to / (excluding files directly in /mnt, e.g. this script)
find . -type d -mindepth 1 -maxdepth 1 -exec cp -r -- {} / \;

# execute user provided mkosi.postinst
[ -f '/mnt/mkali.postinst' ] && echo "Executing postinst" ; exec '/mnt/mkali.postinst'
exit 0
_EOF_

# convert $PACKAGES config entry to $PACKAGE_ARGS
PACKAGE_ARGS=$(echo "$PACKAGES" | sed -e 's/\([[:space:]]\+\|^\)\(.\)/ -p \2/g')

# cache the packages
: ${APK_CACHE:="./mkali.cache"}
sudo mkdir -p "$APK_CACHE"
# root required for nbd mounts :/
sudo APK="$APK" APK_OPTS="--no-progress --cache-dir $APK_CACHE" ./alpine-make-vm-image/alpine-make-vm-image \
	-f "$IMAGE_FORMAT" -s "$IMAGE_SIZE" --rootfs "$ROOTFS" -k "$KERNEL_FLAVOR" $PACKAGE_ARGS \
	-r "$REPOSITORIES" --keys-dir "$KEYS_DIR" --script-chroot \
	-- "$OUTPUT" "$SETUP_SCRIPT"
# remove auto-generated setup script
[ -f "$SETUP_SCRIPT" ] && rm "$SETUP_SCRIPT"
# fix image file ownership for qemu
i=$(whoami)
sudo chown "$i":"$i" "$OUTPUT"

exit 0
