#!/bin/sh
# Make an Alpine Linux VM image
# Alpine Linux OS version is set via repositories file (usually latest-stable or edge) in config dir
set -eu

TARGET="$1"
if [ ! -d "$TARGET" ]; then
	echo "mkali requires a path to the configuration directory as argument"
	exit 1
fi
echo "Building $TARGET"

# source target configuration
[ -f "$TARGET/mkali.conf" ] && . "$TARGET/mkali.conf"

# else, set default configuration
: ${VM_NAME:=$(basename "$TARGET")}
: ${IMAGE_FORMAT:='qcow2'}
: ${IMAGE_SIZE:='200M'}
: ${ROOTFS:='ext4'}
: ${KERNEL_FLAVOR:='virt'}
: ${OUTPUT:="$VM_NAME.$IMAGE_FORMAT"}
: ${POSTINST:="$TARGET/mkali.postinst"}
: ${REPOSITORIES:="$TARGET/etc/apk/repositories"}
: ${KEYS_DIR:="$TARGET/etc/apk/keys"}
: ${PASSWORD='password'}
# TODO: add all other alpine-make-vm-image options

# alpine-make-vm-image re-downloads the tools *every time* -.-
# so let's at least re-use them in /tmp
# TODO: upstream this (maybe combined with apk cache)
: ${APK_TOOLS_URI:="https://github.com/alpinelinux/apk-tools/releases/download/v2.9.1/apk-tools-2.9.1-x86_64-linux.tar.gz"}
: ${APK_TOOLS_SHA256:="a0546d814a85fcc94a6e560360c4f1997119e40d79d9bc818f1571b2cf2ea5e9"}
: ${APK:="/tmp/apk-tools/apk"}
APK_DIR=$(dirname "$APK")
# TODO: version/integrity check apk binary
if ! command -v "$APK" >/dev/null; then
	echo 'Downloading static apk-tools...'
	OLDWD=$(pwd)
	mkdir -p "$APK_DIR" && cd "$APK_DIR" \
	  && wget --no-verbose "$APK_TOOLS_URI" \
	  && echo "$APK_TOOLS_SHA256  ${APK_TOOLS_URI##*/}" | sha256sum -c \
	  && tar --strip-components=1 -xzf "${APK_TOOLS_URI##*/}" \
	  && rm "${APK_TOOLS_URI##*/}"
	cd "$OLDWD"
fi

# convert $PACKAGES config entry to $PACKAGE_ARGS
PACKAGE_ARGS=$(echo "$PACKAGES" | sed -e 's/\([[:space:]]\+\|^\)\(.\)/ -p \2/g')

# cache the packages
: ${APK_CACHE:="./mkali.cache"}
sudo mkdir -p "$APK_CACHE"
# sudo required for nbd mounts :/
# TODO: move always needed postinst stuff here and combine with user provided postinst
sudo APK="$APK" APK_OPTS="--no-progress --cache-dir $APK_CACHE" ./alpine-make-vm-image/alpine-make-vm-image \
	-f "$IMAGE_FORMAT" -s "$IMAGE_SIZE" --rootfs "$ROOTFS" -k "$KERNEL_FLAVOR" $PACKAGE_ARGS \
	-r "$REPOSITORIES" --keys-dir "$KEYS_DIR" --script-chroot \
	-- "$OUTPUT" "$POSTINST" "$PASSWORD" "$VM_NAME"
# fix ownership for qemu
i=$(whoami)
sudo chown "$i":"$i" "$OUTPUT"

exit 0
